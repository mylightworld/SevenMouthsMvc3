//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SevenMouths.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Share))]
    public partial class Vote: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int VoteId
        {
            get { return _voteId; }
            set
            {
                if (_voteId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VoteId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _voteId = value;
                    OnPropertyChanged("VoteId");
                }
            }
        }
        private int _voteId;
    
        [DataMember]
        public Nullable<int> ShareId
        {
            get { return _shareId; }
            set
            {
                if (_shareId != value)
                {
                    ChangeTracker.RecordOriginalValue("ShareId", _shareId);
                    if (!IsDeserializing)
                    {
                        if (Share != null && Share.ShareId != value)
                        {
                            Share = null;
                        }
                    }
                    _shareId = value;
                    OnPropertyChanged("ShareId");
                }
            }
        }
        private Nullable<int> _shareId;
    
        [DataMember]
        public Nullable<int> Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private Nullable<int> _value;
    
        [DataMember]
        public Nullable<int> VotedBy
        {
            get { return _votedBy; }
            set
            {
                if (_votedBy != value)
                {
                    _votedBy = value;
                    OnPropertyChanged("VotedBy");
                }
            }
        }
        private Nullable<int> _votedBy;
    
        [DataMember]
        public Nullable<System.DateTime> VotedAt
        {
            get { return _votedAt; }
            set
            {
                if (_votedAt != value)
                {
                    _votedAt = value;
                    OnPropertyChanged("VotedAt");
                }
            }
        }
        private Nullable<System.DateTime> _votedAt;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Share Share
        {
            get { return _share; }
            set
            {
                if (!ReferenceEquals(_share, value))
                {
                    var previousValue = _share;
                    _share = value;
                    FixupShare(previousValue);
                    OnNavigationPropertyChanged("Share");
                }
            }
        }
        private Share _share;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Share = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupShare(Share previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Votes.Contains(this))
            {
                previousValue.Votes.Remove(this);
            }
    
            if (Share != null)
            {
                if (!Share.Votes.Contains(this))
                {
                    Share.Votes.Add(this);
                }
    
                ShareId = Share.ShareId;
            }
            else if (!skipKeys)
            {
                ShareId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Share")
                    && (ChangeTracker.OriginalValues["Share"] == Share))
                {
                    ChangeTracker.OriginalValues.Remove("Share");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Share", previousValue);
                }
                if (Share != null && !Share.ChangeTracker.ChangeTrackingEnabled)
                {
                    Share.StartTracking();
                }
            }
        }

        #endregion
    }
}
